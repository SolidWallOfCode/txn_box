'''
Implement txn_box extensions for Traffic Server.
'''
# @file
#
# Copyright 2020, Verizon Media
# SPDX-License-Identifier: Apache-2.0
#

import os.path


def ConfigureTsForTxnBox(run, ts, server, txn_box_config=None, txn_box_key='meta.txn_box'):
    """
    Set the Default process of the test run to a replay-client Process.

    Args:
        run: (TestRun) The test run to which the client process is added.

        ts: (Process) The Traffic Server process being configured for txn_box.

        server: (Process) The server that Traffic Server proxies to.

        txn_box_config: (str) The txn_box yaml configuration file. This becomes
            the --config argument to txn_box.

        txn_box_key: (str) The txn_box key value for the yaml file. This becomes
            the --key argument to txn_box.
    """

    # Put the txn_box.so into the sandbox.
    plugin_dir = ts.Env['PROXY_CONFIG_PLUGIN_PLUGIN_DIR']
    from os.path import dirname
    git_root = dirname(dirname(dirname(ts.TestRoot)))
    txn_box_lib = os.path.join(git_root, "lib", "txn_box.so")
    ts.Setup.Copy(txn_box_lib, plugin_dir, CopyLogic.SoftFiles)

    # Configure txn_box in Traffic Server.
    txn_box_command = 'txn_box.so '
    if txn_box_config:
        test_config = os.path.join(run.TestDirectory, txn_box_config)
        run_config = os.path.join(ts.RunDirectory, os.path.basename(txn_box_config))
        ts.Setup.Copy(test_config, ts.RunDirectory, CopyLogic.SoftFiles)
        txn_box_command += ' --config {}'.format(run_config)
    if txn_box_key:
        txn_box_command += ' --key {}'.format(txn_box_key)
    ts.Disk.plugin_config.AddLine(txn_box_command)

    ts.Disk.remap_config.AddLine('map / http://127.0.0.1:{0}'.format(server.Variables.http_port))


##########################################################################
ExtendTestRun(ConfigureTsForTxnBox, name="ConfigureTsForTxnBox")
