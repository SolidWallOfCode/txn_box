'''
Implement txn_box extensions for Traffic Server.
'''
# @file
#
# Copyright 2020, Verizon Media
# SPDX-License-Identifier: Apache-2.0
#

import os.path


def TxnBoxTestRun(self, text, replay_path, config_key="meta.txn_box",
                  config_path=None, remap_configs=None):
    """
    Set up a standard test run for TxnBox

    Args:
        text: (str) Description for test run.
        replay_path: (str) Path to the replay file.
        config_key: (str) The --key parameter to pass into txn_box.so in the
            plugin.config file.
        config_path: (str) The --config parameter to pass into txn_box.so in the
            plugin.config file.
        remap_configs: [(from, to, [pparams])] Allows the specification of a
            set of remap config lines. If pparams is provided, then
            @plugin=txn_box.so is set and the set of pparams are placed in.
    Keywords
        replay_path: (str) The replay file.
    """

    run = self.AddTestRun(text)

    ts = self.MakeATSProcess("ts")
    run.Variables.TS = ts
    pv_client = run.AddVerifierClientProcess(
        "pv-client", ts, replay_path,
        http_ports=[ts.Variables.port])
    run.Variables.CLIENT = pv_client

    pv_server = run.AddVerifierServerProcess("pv-server", replay_path)
    run.Variables.SERVER = pv_server

    # Put the txn_box.so into the sandbox.
    plugin_dir = ts.Env['PROXY_CONFIG_PLUGIN_PLUGIN_DIR']
    from os.path import dirname
    git_root = dirname(dirname(dirname(ts.TestRoot)))
    txn_box_lib = os.path.join(git_root, "lib", "txn_box.so")
    ts.Setup.Copy(txn_box_lib, plugin_dir, CopyLogic.SoftFiles)

    # Configure txn_box in Traffic Server.
    txn_box_command = 'txn_box.so '

    if config_key:
        txn_box_command += ' --key {}'.format(config_key)

    if config_path is None:
        config_path = replay_path

    ts.Setup.Copy(config_path, ts.Variables.CONFIGDIR)
    txn_box_command += ' --config {}'.format(os.path.basename(config_path))

    ts.Disk.plugin_config.AddLine(txn_box_command)

    # Configure Traffic Server to use the DNS process.
    dns = self.MakeDNServer("dns", ip='127.0.0.1', default=['127.0.0.1'])

    ts.Disk.records_config.update({
        'proxy.config.dns.nameservers': '127.0.0.1:{0}'.format(dns.Variables.Port),
        'proxy.config.dns.resolv_conf': 'NULL',
        # The following is needed for ATS 9 and later.
        # 'proxy.config.plugin.dynamic_reload': 0
    })
    if remap_configs:
        for remap_config in remap_configs:
            if len(remap_config) not in [2, 3]:
                raise ValueError("remap_configs entries must be either "
                                 "(from, to) or (from, to, [pparams])")
            map_from, map_to = remap_config[0:2]
            if len(remap_config) == 3:
                pparams = remap_config[2]
            else:
                pparams = None
            line = 'map {map_from} {map_to}:{server_port} '.format(
                map_from=map_from, map_to=map_to, server_port=pv_server.Variables.http_port)
            if pparams:
                line += '@plugin=txn_box.so '
                for pparam in pparams:
                    line += '@pparam={} '.format(pparam)
            ts.Disk.remap_config.AddLine(line)
    else:
        ts.Disk.remap_config.AddLine('map / http://127.0.0.1:{0}'.format(pv_server.Variables.http_port))

    pv_client.StartBefore(pv_server)
    run.Processes.Default.StartBefore(pv_server)
    run.Processes.Default.StartBefore(ts, ready=When.PortOpen(ts.Variables.port))
    run.Processes.Default.StartBefore(dns)

    return run


ExtendTest(TxnBoxTestRun, name="TxnBoxTestRun")
